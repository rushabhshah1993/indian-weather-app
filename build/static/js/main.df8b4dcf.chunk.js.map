{"version":3,"sources":["components/City/City.css","pages/MyCities/MyCities.css","pages/Main/Main.css","pages/Home/Home.css","pages/Login/Login.css","pages/CityDetail/CityDetail.css","App.css","components/City/City.js","pages/Home/Home.js","store/actions/homeActions.js","pages/MyCities/MyCities.js","pages/CityDetail/CityDetail.js","pages/Login/Login.js","pages/Main/Main.js","store/actions/myCitiesActions.js","App.js","serviceWorker.js","store/reducers/homeReducer.js","store/reducers/myCitiesReducer.js","store/reducers/loginReducer.js","index.js"],"names":["module","exports","withRouter","connect","props","useState","tempType","setTempType","tempTypes","classNames","styles","Button","tempCategories","map","type","push","Active","key","className","join","onClick","temperature","min_temp","max_temp","data","main","temp","temp_min","temp_max","date","Date","getDay","getHours","getMinutes","cityStyles","City","Dark","Sunny","CityContainer","CityHeader","CityName","name","TempContainer","Temperature","parseInt","WeatherDescription","Description","weather","TempCategories","MoreDetails","history","pathname","state","selectedCity","AddButton","addCity","Home","onCitySelectionHandler","event","city","target","value","Axios","get","then","response","obj","selectedCityData","onCitySelection","catch","error","console","log","options","this","allCities","city_value","country","id","SelectContainer","htmlFor","ref","cityOptions","onChange","CitySelector","Component","home","dispatch","payload","MyCities","citiesData","selectedTempType","updatedFromStore","getTemp","toFixed","tempTypeChangeHandler","setState","innerHTML","WeatherCard","cityCards","Object","keys","length","WeatherCardContainer","RemoveButton","removeCity","buttonClasses","tempButtons","TitleContainer","Title","isAuthenticated","savedCities","myCities","login","CityDetail","componentDidMount","location","getDateAndTime","now","getMonth","getDate","getFullYear","time","getTemperatures","selectTempTypeHandler","sunrise","sunset","today","temperatures","sunriseData","sys","sunsetData","CityDetailContainer","match","params","Time","MoreDesc","DescDetails","Labels","Values","visibility","wind","speed","pressure","humidity","Login","usernameValue","passwordValue","usernameChangeHandler","passwordChangeHandler","usernameRef","React","createRef","passwordRef","myCitiesStyles","Form","LoginButton","Main","initCities","cities","initSavedCities","addCityHandler","put","removeCityHandler","removed_city","filter","split","Navbar","NavItemContainer","exact","to","activeClassName","NavItem","path","component","values","promises","url","all","results","forEach","result","getSavedCities","App","Boolean","window","hostname","initialState","homeReducer","action","updatedState","myCitiesReducer","loginReducer","composeEnhancers","compose","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df8b4dcf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"City\":\"City__City___1gCuR\",\"CityName\":\"City__CityName___1PLAd\",\"WeatherDescription\":\"City__WeatherDescription___1pSfv\",\"CityContainer\":\"City__CityContainer___WD35e\",\"Temperature\":\"City__Temperature___25bsH\",\"Button\":\"City__Button___1mL1Q\",\"TempContainer\":\"City__TempContainer___2dQP3\",\"TempCategories\":\"City__TempCategories___26M-c\",\"Active\":\"City__Active___1JnRR\",\"AddButton\":\"City__AddButton___l6MRr\",\"MoreDetails\":\"City__MoreDetails___3WwG8\",\"Dark\":\"City__Dark___IHCwo\",\"Sunny\":\"City__Sunny___2C9k9\",\"Stormy\":\"City__Stormy___3R6ho\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MyCities\":\"MyCities__MyCities___2QZv2\",\"TitleContainer\":\"MyCities__TitleContainer___1uZ8x\",\"Title\":\"MyCities__Title___2-5jm\",\"WeatherCardContainer\":\"MyCities__WeatherCardContainer___3asc6\",\"RemoveButton\":\"MyCities__RemoveButton___1sJPc\",\"WeatherCard\":\"MyCities__WeatherCard___1Vm7Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"Main__Navbar___NA36g\",\"Title\":\"Main__Title___2SsnF\",\"NavItemContainer\":\"Main__NavItemContainer___3Mggo\",\"NavItem\":\"Main__NavItem___2oxEk\",\"Active\":\"Main__Active___2KDcC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CitySelector\":\"Home__CitySelector___3yhto\",\"SelectContainer\":\"Home__SelectContainer___jQ3EN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login__Login___kkMYi\",\"Form\":\"Login__Form___2EaYi\",\"LoginButton\":\"Login__LoginButton___3WR1b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CityDetailContainer\":\"CityDetail__CityDetailContainer___1jGuu\",\"CityDetail\":\"CityDetail__CityDetail___2y0QB\",\"Date\":\"CityDetail__Date___1W2Dd\",\"MoreDesc\":\"CityDetail__MoreDesc___z1PF1\",\"DescDetails\":\"CityDetail__DescDetails___14d2b\",\"Labels\":\"CityDetail__Labels___2VIKT\",\"Values\":\"CityDetail__Values___1puQa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App___1o-Fp\",\"App-logo\":\"App__App-logo___3JCPt\",\"App-header\":\"App__App-header___3iH8L\",\"App-link\":\"App__App-link___13fTZ\"};","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport styles from './City.css';\n\nconst City = (props) => {\n    const [tempType, setTempType] = useState('°C');\n    const [tempTypes] = useState(['°C', 'K', '°F']);\n\n    let classNames = [styles.Button];\n    let tempCategories = tempTypes.map(type => {\n        if(tempType === type) {\n            classNames.push(styles.Active);\n        } else {\n            classNames = [styles.Button]\n        }\n        return <button key={type} className={classNames.join(' ')} onClick={() => setTempType(type)}>{type}</button>\n    })\n    let temperature = null;\n    let min_temp = null;\n    let max_temp = null;\n    if(tempType === '°C') { \n        temperature = props.data.main.temp - 273.15;\n        min_temp = props.data.main.temp_min - 273.15;\n        max_temp = props.data.main.temp_max - 273.15;\n    } else if(tempType === 'K') { \n        temperature = props.data.main.temp;\n        min_temp = props.data.main.temp_min;\n        max_temp = props.data.main.temp_max;\n    }\n    else if(tempType === '°F') {\n        temperature = ((props.data.main.temp-273.15)*1.8)+32;\n        min_temp = ((props.data.main.temp_min-273.15)*1.8)+32;\n        max_temp = ((props.data.main.temp_max-273.15)*1.8)+32;\n    }\n    let week = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n    let date = week[new Date().getDay()] + ', ' + new Date().getHours() + \":\" + (new Date().getMinutes() < 10 ? '0'+new Date().getMinutes() : new Date().getMinutes());\n    let cityStyles = [styles.City];\n    if(new Date().getHours() > 19 || new Date().getHours() < 7) { cityStyles.push(styles.Dark); }\n    else { cityStyles.push(styles.Sunny); }\n    return (\n        <>\n            <div className={styles.CityContainer}>\n                <div className={cityStyles.join(' ')}>\n                    <div className={styles.CityHeader}>\n                            <p className={styles.CityName}>{props.data.name}</p>\n                            <span>{date}</span>\n                        </div>\n                    <div className={styles.TempContainer}>\n                        <p className={styles.Temperature}>{parseInt(temperature)} {tempType}</p>\n                        <div className={styles.WeatherDescription}>\n                            <span className={styles.Description}>{props.data.weather[0].main}</span>\n                            <span>{parseInt(max_temp)} {tempType}/{parseInt(min_temp)} {tempType}</span>\n                        </div>\n                    </div>\n                    <div className={styles.TempCategories}>\n                        Tempature Type:\n                        {tempCategories}\n                    </div>\n                </div>\n            </div>\n            <p \n                className={styles.MoreDetails} \n                onClick={() => props.history.push({\n                    pathname: '/city/'+props.data.name,\n                    state: {selectedCity: props.selectedCity}\n                })}>\n                View More Details\n            </p>\n            <button className={styles.AddButton} onClick={() => props.addCity(props.selectedCity)}>Add {props.data.name} to My Cities</button>\n        </>\n    )\n}\n\nexport default withRouter(connect()(City));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styles from './Home.css';\nimport City from './../../components/City/City';\nimport { onCitySelection } from './../../store/actions/homeActions';\nimport Axios from 'axios';\n\nclass Home extends Component {\n    onCitySelectionHandler = (event) => {\n        let city = event.target.value;\n        Axios.get('http://api.openweathermap.org/data/2.5/weather?q='+event.target.value+'&APPID=60dfad51347e098c9a6b000ced44c353')\n            .then(response => {\n                let obj = {\n                    selectedCity: city,\n                    selectedCityData: response.data\n                };\n                this.props.onCitySelection(obj);\n            })\n            .catch(error => console.log(error));\n    }\n\n    render() {\n        let options = this.props.allCities.map(city => {\n            let city_value = city.city + ',' + city.country;\n            return <option value={city_value} key={city.id}>{city_value}</option>;\n        })\n        return (\n            <div className={styles.Home}>\n                <div className={styles.SelectContainer}>\n                    <label htmlFor='cities'>Choose your city:</label>    \n                    <select id='cities' ref={this.cityOptions} onChange={this.onCitySelectionHandler} className={styles.CitySelector} value={this.props.selectedCity || ''} >\n                        <option>Nothing is selected</option>\n                        {options}\n                    </select>\n                </div>\n                {\n                    this.props.selectedCity !== null ?\n                    <City data={this.props.selectedCityData} selectedCity={this.props.selectedCity} addCity={(city) =>  this.props.addCity(city)} /> :\n                    null\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        allCities: state.home.allCities,\n        selectedCity: state.home.selectedCity,\n        selectedCityData: state.home.selectedCityData\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onCitySelection: (city) => dispatch(onCitySelection(city))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","export const initCities = (payload) => {\n    return {\n        type: 'INIT_CITIES',\n        payload: payload \n    }\n}\n\nexport const onCitySelection = (payload) => {\n    return {\n        type: 'ON_SELECT_CITY',\n        payload: payload\n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport styles from './MyCities.css';\n\nimport cityStyles from './../../components/City/City.css';\n\nclass MyCities extends Component {\n    state = {\n        citiesData: {},\n        tempTypes: ['°C', 'K', '°F'],\n        selectedTempType: 'K',\n        updatedFromStore: false\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        console.log(props);\n        if(!props.isAuthenticated) {\n            props.history.push('/login');\n        }\n        return state;\n    }\n\n    getTemp = (temp) => {\n        let temperature = temp;\n        let tempType = this.state.selectedTempType;\n        if(tempType === '°C') { temperature = temp - 273.15; } \n        else if(tempType === 'K') { temperature = temp; }\n        else if(tempType === '°F') { temperature = ((temp-273.15)*1.8)+32; }\n        return temperature.toFixed(1);\n    }\n\n    tempTypeChangeHandler = (event) => {\n        this.setState({\n            selectedTempType: event.target.innerHTML\n        })\n    }\n\n    render() {\n        let classNames = [styles.WeatherCard];\n        if(new Date().getHours() > 19 || new Date().getHours() < 7) { classNames.push(cityStyles.Dark); }\n        else { classNames.push(cityStyles.Sunny); }\n        let cityCards = \"You haven't selected any cities\";\n        if(Object.keys(this.props.citiesData).length > 0) {\n            cityCards = Object.keys(this.props.citiesData).map(city => {\n                let temp = this.getTemp(this.props.citiesData[city]);\n                return (\n                    <div className={styles.WeatherCardContainer} key={city}>\n                        <div className={classNames.join(' ')}>\n                            <p>{city}</p>\n                            <p>{temp} {this.state.selectedTempType}</p>\n                        </div>\n                        <button id={city} className={styles.RemoveButton} onClick={() => this.props.removeCity(city)}>Remove</button>\n                    </div>\n                )\n            })\n        }\n        let buttonClasses = [cityStyles.Button];\n        let tempButtons = this.state.tempTypes.map(type => {\n            if(type === this.state.selectedTempType) {\n                buttonClasses.push(cityStyles.Active);\n            } else {\n                buttonClasses = [cityStyles.Button];\n            }\n            return <button key={type} className={buttonClasses.join(' ')} onClick={this.tempTypeChangeHandler}>{type}</button>;\n        })\n        return (\n            <div className={styles.MyCities}>\n                <div className={styles.TitleContainer}>\n                    <p className={styles.Title}>My Cities</p>\n                    <span>Selected Temperature Type: </span>{tempButtons}\n                </div>\n                {cityCards}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        savedCities: state.myCities.savedCities,\n        citiesData: state.myCities.citiesData,\n        isAuthenticated: state.login.isAuthenticated\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(MyCities));\n","import React, { Component } from 'react';\nimport styles from './CityDetail.css';\nimport cityStyles from './../../components/City/City.css';\n\nimport Axios from 'axios';\n\nclass CityDetail extends Component {\n    state = {\n        data: {},\n        tempTypes: ['°C', 'K', '°F'],\n        selectedTempType: '°C'\n    }\n\n    componentDidMount = () => {\n        Axios.get('http://api.openweathermap.org/data/2.5/weather?q='+this.props.history.location.state.selectedCity+'&APPID=60dfad51347e098c9a6b000ced44c353')\n            .then(response => {\n                this.setState({\n                    data: response.data\n                })\n            })\n            .catch(error => {console.log(error)});\n    }\n\n    getDateAndTime = () => {\n        let obj = {};\n        let now = new Date();\n        let week = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n        let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        let date = week[now.getDay()] + ',' + months[now.getMonth()] + ' ' + now.getDate() + ' ' + now.getFullYear();\n        let time = now.getHours() + \":\" + (now.getMinutes() < 10 ? '0'+now.getMinutes() : now.getMinutes())\n        obj.date = date;\n        obj.time = time;\n        return obj;\n    }\n\n    getTemperatures = (data) => {\n        let obj = {};\n        let temp = data.main.temp;\n        let temp_min = data.main.temp_min;\n        let temp_max = data.main.temp_max;\n        let tempType = this.state.selectedTempType;\n        if(tempType === '°C') { \n            temp = data.main.temp - 273.15;\n            temp_min = data.main.temp_min - 273.15;\n            temp_max = data.main.temp_max - 273.15;\n        } else if(tempType === 'K') { \n            temp = data.main.temp;\n            temp_min = data.main.temp_min;\n            temp_max = data.main.temp_max;\n        }\n        else if(tempType === '°F') {\n            temp = ((data.main.temp-273.15)*1.8)+32;\n            temp_min = ((data.main.temp_min-273.15)*1.8)+32;\n            temp_max = ((data.main.temp_max-273.15)*1.8)+32;\n        }\n        obj.temp = temp.toFixed(1);\n        obj.temp_min = temp_min.toFixed(1);\n        obj.temp_max = temp_max.toFixed(1);\n        return obj;\n    }\n\n    selectTempTypeHandler = (event) => {\n        this.setState({\n            selectedTempType: event.target.innerHTML\n        })\n    }\n    \n    render() {\n        let classNames = [styles.CityDetail];\n        let sunrise = null;\n        let sunset = null;\n        if(new Date().getHours() > 19 || new Date().getHours() < 7) { classNames.push(cityStyles.Dark); }\n        else { classNames.push(cityStyles.Sunny); }\n        let today = this.getDateAndTime();\n        let temperatures = Object.keys(this.state.data).length > 0 && this.getTemperatures(this.state.data);\n        let tempCategories = this.state.tempTypes.map(type => {\n            let buttonClasses = [cityStyles.Button];\n            if(this.state.selectedTempType === type) {\n                buttonClasses.push(cityStyles.Active);\n            } else {\n                buttonClasses = [cityStyles.Button]\n            }\n            return <button key={type} className={buttonClasses.join(' ')} onClick={this.selectTempTypeHandler}>{type}</button>\n        })\n        if(Object.keys(this.state.data).length > 0) {\n            let sunriseData = new Date(this.state.data.sys.sunrise * 1000);\n            sunrise = sunriseData.getHours() + \":\" + (sunriseData.getMinutes() < 10 ? '0'+sunriseData.getMinutes() : sunriseData.getMinutes());\n            let sunsetData = new Date(this.state.data.sys.sunset * 1000);\n            sunset = sunsetData.getHours() + \":\" + (sunsetData.getMinutes() < 10 ? '0'+sunsetData.getMinutes() : sunsetData.getMinutes());\n        }\n        return (\n            <div className={styles.CityDetailContainer}>\n                <div className={classNames.join(' ')}>\n                    <div className={cityStyles.CityHeader}>\n                        <p className={cityStyles.CityName}>{this.props.match.params.city}</p>\n                        <span className={styles.Date}>{today.date}</span> \n                        <span className={styles.Time}>{today.time}</span>\n                    </div>\n                    {\n                        Object.keys(this.state.data).length > 0 &&\n                        <>\n                            <div className={cityStyles.TempContainer}>\n                                <p className={cityStyles.Temperature}>{parseInt(temperatures.temp)} {this.state.selectedTempType}</p>\n                                <div className={cityStyles.WeatherDescription}>\n                                    <span className={cityStyles.Description}>{this.state.data.weather[0].main}</span>\n                                    <span>{parseInt(temperatures.temp_max)} {this.state.selectedTempType}/{parseInt(temperatures.temp_min)} {this.state.selectedTempType}</span>\n                                </div>\n                            </div>\n                            <div className={cityStyles.TempCategories}>\n                                Tempature Type:\n                                {tempCategories}\n                            </div>\n                            <hr />\n                            <div className={styles.MoreDesc}>\n                                <div className={styles.DescDetails}>\n                                    <label className={styles.Labels}>Visibility</label>\n                                    <p className={styles.Values}>{this.state.data.visibility/1000} KM</p>\n                                </div>\n                                <div className={styles.DescDetails}>\n                                    <label className={styles.Labels}>Wind Speed</label>\n                                    <p className={styles.Values}>{this.state.data.wind.speed} km/h</p>\n                                </div>\n                                <div className={styles.DescDetails}>\n                                    <label className={styles.Labels}>Pressure</label>\n                                    <p className={styles.Values}>{this.state.data.main.pressure} hPa</p>\n                                </div>\n                                <div className={styles.DescDetails}>\n                                    <label className={styles.Labels}>Humidity</label>\n                                    <p className={styles.Values}>{this.state.data.main.humidity} %</p>\n                                </div>\n                                <div className={styles.DescDetails}>\n                                    <label className={styles.Labels}>Sunrise</label>\n                                    <p className={styles.Values}>{sunrise}</p>\n                                </div>\n                                <div className={styles.DescDetails}>\n                                    <label className={styles.Labels}>Sunset</label>\n                                    <p className={styles.Values}>{sunset}</p>\n                                </div>\n                            </div>\n                        </>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CityDetail;\n","import React, { Component } from 'react';\nimport styles from './Login.css';\nimport myCitiesStyles from './../MyCities/MyCities.css';\n\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.usernameRef = React.createRef();\n        this.passwordRef = React.createRef();\n    }\n    \n    state = {\n        usernameValue: '',\n        passwordValue: ''\n    }\n\n    usernameChangeHandler = (event) => {\n        this.setState({\n            usernameValue: event.target.value\n        })\n    }\n\n    passwordChangeHandler = (event) => {\n        this.setState({\n            passwordValue: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className={styles.Login}>\n                <p className={myCitiesStyles.Title}>Log in to your account</p>\n                <div className={styles.Form}>\n                    <input type='text' value={this.state.usernameValue} onChange={this.usernameChangeHandler}></input>\n                    <input type='password' value={this.state.passwordValue} onChange={this.passwordChangeHandler}></input>\n                    <button className={styles.LoginButton}>Login</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styles from './Main.css';\nimport Home from './../Home/Home';\nimport MyCities from './../MyCities/MyCities';\nimport CityDetail from './../CityDetail/CityDetail';\nimport Login from './../Login/Login';\n\nimport Axios from 'axios';\n\nimport { Switch, Route, NavLink } from 'react-router-dom';\n\nimport { initCities } from './../../store/actions/homeActions';\nimport { initSavedCities } from './../../store/actions/myCitiesActions';\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n        this.cityOptions = React.createRef();\n        this.state = {\n            cities: [],\n            selectedCity: null,\n            selectedCityData: {}\n        }\n    }\n\n    componentDidMount = () => {\n        Axios.get('https://weather-app-487b0.firebaseio.com/.json')\n            .then(response => {\n                this.props.initCities({\n                    cities: response.data.cities,\n                });\n                this.props.initSavedCities({\n                    savedCities: response.data.savedCities\n                })\n            })\n            .catch(error => {console.log(error);})\n    }\n\n    addCityHandler = (city) => {\n        let savedCities = [...this.props.savedCities];\n        savedCities.push(city);\n        Axios.put('https://weather-app-487b0.firebaseio.com/savedCities.json', savedCities)\n            .then(response => {\n                this.props.initSavedCities({\n                    savedCities: savedCities\n                })\n            })\n            .catch(error => {console.log(error)});\n    }\n\n    removeCityHandler = (removed_city) => {\n        let savedCities = [...this.props.savedCities];\n        savedCities = savedCities.filter(city => {\n            return city.split(',')[0] !== removed_city;\n        })\n        Axios.put('https://weather-app-487b0.firebaseio.com/savedCities.json', savedCities)\n            .then(response => {\n                this.props.initSavedCities({\n                    savedCities: savedCities\n                })\n            })\n            .catch(error => {console.log(error);})\n    }\n\n    render() {\n        return (\n            <>\n                <div className={styles.Navbar}>\n                    <p className={styles.Title}>My Weather Application</p>\n                    <div className={styles.NavItemContainer}>\n                        <NavLink exact to=\"/\" activeClassName={styles.Active}>\n                            <div className={styles.NavItem}>Home</div>\n                        </NavLink>\n                        <NavLink to=\"/mycities\" activeClassName={styles.Active}>\n                            <div className={styles.NavItem}>My Cities</div>\n                        </NavLink>\n                    </div>\n                </div>\n                <Switch>\n                    <Route path=\"/login\" component={Login} />\n                    <Route path=\"/mycities\" component={() => <MyCities removeCity={this.removeCityHandler} /> } />\n                    <Route path=\"/city/:city\" component={CityDetail} />\n                    <Route path=\"/\" component={() => <Home  addCity={this.addCityHandler} />} />\n                </Switch>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        savedCities: state.myCities.savedCities\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        initCities: (cities) =>  dispatch(initCities(cities)),\n        initSavedCities: (savedCities) => dispatch(initSavedCities(savedCities))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import Axios from 'axios';\n\nexport const getSavedCities = payload => {\n    return {\n        type: 'GET_SAVED_CITIES',\n        payload: payload\n    }\n}\n\nexport const initSavedCities = (payload) => {\n    return dispatch => {\n        let values = {},\n            promises = [];\n\n        let savedCities = [...payload.savedCities];\n\n        for(let city of savedCities) {\n            let url = 'http://api.openweathermap.org/data/2.5/weather?q='+city+'&APPID=60dfad51347e098c9a6b000ced44c353';\n            promises.push(Axios.get(url));\n        }\n\n        Axios.all(promises).then(results => {\n            results.forEach(result => {\n                values[result.data.name] = result.data.main.temp;\n            })\n            dispatch(getSavedCities({\n                savedCities: payload.savedCities,\n                citiesData: values\n            }))\n        })\n    }\n}","import React from 'react';\nimport styles from './App.css';\nimport Main from './pages/Main/Main';\nimport { BrowserRouter } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <BrowserRouter>\n        <Main />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    allCities: [],\n    selectedCity: null,\n    selectedCityData: {},\n}\n\nconst homeReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case 'INIT_CITIES': {\n            let updatedState = {...state};\n            updatedState.allCities = action.payload.cities;\n            return updatedState;\n        }\n        case 'ON_SELECT_CITY': {\n            let updatedState = {...state};\n            updatedState.selectedCity = action.payload.selectedCity;\n            updatedState.selectedCityData = action.payload.selectedCityData;\n            return updatedState;\n        }\n        default: return state;\n    }\n}\n\nexport default homeReducer;","const initialState = {\n    savedCities: [],\n    citiesData: {}\n}\n\nconst myCitiesReducer = (state = initialState, action) => {\n    switch(action.type) {   \n        case 'GET_SAVED_CITIES': {\n            let updatedState = {...state};\n            updatedState.savedCities = action.payload.savedCities;\n            updatedState.citiesData = action.payload.citiesData;\n            return updatedState;\n        }\n        default: return state;\n    }\n}\n\nexport default myCitiesReducer;","const initialState = {\n    isAuthenticated: false\n}\n\nconst loginReducer = (state = initialState, action) => {\n    switch(action.type) {\n        default: return state;\n    }\n}\n\nexport default loginReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport homeReducer from './store/reducers/homeReducer';\nimport myCitiesReducer from './store/reducers/myCitiesReducer';\nimport loginReducer from './store/reducers/loginReducer';\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst rootReducer = combineReducers({\n    home: homeReducer,\n    myCities: myCitiesReducer,\n    login: loginReducer\n})\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}